name: Update Policy Feed

on:
  schedule:
    - cron: "0 */6 * * *"
  workflow_dispatch: {}

permissions:
  contents: write

concurrency:
  group: update-policy-feed
  cancel-in-progress: false

env:
  TZ: UTC
  PYTHONHASHSEED: "0"
  PYTHONIOENCODING: "UTF-8"

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout main
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: "pip"

      - name: Install requirements
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Ensure data directory exists
        run: mkdir -p data

      # --- PRE-SYNC: ensure we start from latest remote main ---
      - name: Pre-sync with origin/main
        run: |
          git config --global --add safe.directory "$GITHUB_WORKSPACE"
          git fetch origin main
          git rebase origin/main

      # (optional) sanity checks from earlier messages can go here

      - name: Run updater
        run: python update_policy_news.py

      - name: Did JSON change?
        id: diff
        run: |
          if git diff --quiet --exit-code -- data/policyNews.json; then
            echo "changed=false" >> $GITHUB_OUTPUT
          else
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

      - name: Commit updated JSON
        if: steps.diff.outputs.changed == 'true'
        run: |
          git config user.name  "actions-user"
          git config user.email "actions@users.noreply.github.com"
          git add data/policyNews.json
          git commit -m "Automated policy feed update"

      # --- PUSH with safe retry if non-fast-forward ---
      - name: Push update (with retry on rebase)
        if: steps.diff.outputs.changed == 'true'
        run: |
          set -e
          # first try a normal push
          if git push origin HEAD:main; then
            echo "Normal push succeeded."
            exit 0
          fi
          echo "Push rejected; syncing and retrying..."
          # someone pushed to main; rebase onto latest and try again
          git fetch origin main
          git rebase origin/main || (git rebase --abort && git reset --hard origin/main)
          # push using --force-with-lease to avoid clobbering someone else's fresh work
          git push --force-with-lease origin HEAD:main




